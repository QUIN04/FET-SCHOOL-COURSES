def knapsack(weights, values, capacity):
  """
  Solves the 0/1 knapsack problem using dynamic programming.

  Args:
    weights: A list of weights for each item.
    values: A list of values for each item.
    capacity: The maximum weight the knapsack can hold.

  Returns:
    A tuple containing the maximum value and the list of items included.
  """
  n = len(weights)
  dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

  for i in range(1, n + 1):
    for w in range(1, capacity + 1):
      if weights[i - 1] > w:
        dp[i][w] = dp[i - 1][w]
      else:
        dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])

  max_value = dp[n][capacity]
  items = []
  i = n
  w = capacity
  while i > 0 and w > 0:
    if dp[i][w] != dp[i - 1][w]:
      items.append(i - 1)
      w -= weights[i - 1]
    i -= 1

  return max_value, items

# Example usage
weights = [2, 11, 22, 15]
values = [11, 21, 31, 33]
capacity = 50

max_value, items = knapsack(weights, values, capacity)

print(f"Maximum value: {max_value}")
print(f"Items included: {items}")
Use code with caution. Learn more
Output:

Maximum value: 96
Items included: [3, 2, 1, 0]
