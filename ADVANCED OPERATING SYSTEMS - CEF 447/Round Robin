#include <stdio.h>

// Structure to store process information
typedef struct process {
  int process_id;
  int burst_time;
  int arrival_time;
  int waiting_time;
  int turnaround_time;
} Process;

void round_robin(Process processes[], int num_processes, int time_quantum) {
  int completed_processes = 0;
  int current_time = 0;

  // Loop until all processes are completed
  while (completed_processes < num_processes) {
    for (int i = 0; i < num_processes; i++) {
      Process* process = &processes[i];

      // Check if process has arrived and not already completed
      if (process->arrival_time <= current_time && !process->turnaround_time) {
        // Execute the process for the time quantum or remaining burst time, whichever is less
        int execution_time = process->burst_time > time_quantum ? time_quantum : process->burst_time;
        process->burst_time -= execution_time;
        current_time += execution_time;

        // Update waiting and turnaround times
        process->waiting_time += current_time - process->arrival_time - execution_time;
        process->turnaround_time = current_time - process->arrival_time;

        // Check if process is completed
        if (process->burst_time == 0) {
          completed_processes++;
        }
      }
    }
  }
}

void print_results(Process processes[], int num_processes) {
  printf("\nProcess ID\tBurst Time\tWaiting Time\tTurnaround Time\n");
  for (int i = 0; i < num_processes; i++) {
    Process process = processes[i];
    printf("%d\t\t%d\t\t%d\t\
